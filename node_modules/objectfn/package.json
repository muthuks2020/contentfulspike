{
  "_args": [
    [
      {
        "raw": "objectfn@^2.0.0",
        "scope": null,
        "escapedName": "objectfn",
        "name": "objectfn",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/home/muthu/try/spiket/node_modules/reshape-code-gen"
    ]
  ],
  "_from": "objectfn@>=2.0.0 <3.0.0",
  "_id": "objectfn@2.0.0",
  "_inCache": true,
  "_location": "/objectfn",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/objectfn-2.0.0.tgz_1466430274474_0.797068533487618"
  },
  "_npmUser": {
    "name": "jenius",
    "email": "jeff@carrotcreative.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "objectfn@^2.0.0",
    "scope": null,
    "escapedName": "objectfn",
    "name": "objectfn",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/reshape-code-gen"
  ],
  "_resolved": "https://registry.npmjs.org/objectfn/-/objectfn-2.0.0.tgz",
  "_shasum": "3fbc9d2c43690bf2b418ba5e3486e3cbb5b99e95",
  "_shrinkwrap": null,
  "_spec": "objectfn@^2.0.0",
  "_where": "/home/muthu/try/spiket/node_modules/reshape-code-gen",
  "author": {
    "name": "jescalan"
  },
  "ava": {
    "verbose": "true"
  },
  "bugs": {
    "url": "https://github.com/jescalan/objectfn/issues"
  },
  "contributors": [
    {
      "name": "Declan DeWet"
    }
  ],
  "dependencies": {},
  "description": "map, reduce, and filter for objects, lazy evaluation and no dependencies",
  "devDependencies": {
    "ava": "0.15.x",
    "coveralls": "2.x",
    "nyc": "6.x",
    "standard": "7.x"
  },
  "directories": {},
  "dist": {
    "shasum": "3fbc9d2c43690bf2b418ba5e3486e3cbb5b99e95",
    "tarball": "https://registry.npmjs.org/objectfn/-/objectfn-2.0.0.tgz"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "gitHead": "37ba245c15dd5613ae6fbfc5d32d26384545ae5c",
  "homepage": "https://github.com/jescalan/objectfn",
  "keywords": [
    "filter",
    "functional",
    "map",
    "object",
    "reduce",
    "utility"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jenius",
      "email": "jeff@carrotcreative.com"
    }
  ],
  "name": "objectfn",
  "optionalDependencies": {},
  "readme": "# ObjectFn\n\n[![npm](http://img.shields.io/npm/v/objectfn.svg?style=flat)](https://badge.fury.io/js/objectfn) [![tests](http://img.shields.io/travis/jescalan/objectfn/master.svg?style=flat)](https://travis-ci.org/jescalan/objectfn) [![dependencies](http://img.shields.io/david/jescalan/objectfn.svg?style=flat)](https://david-dm.org/jescalan/objectfn) [![coverage](http://img.shields.io/coveralls/jescalan/objectfn.svg?style=flat)](https://coveralls.io/github/jescalan/objectfn)\n\n`map`, `reduce`, `forEach`, and `filter` for plain objects. Lazy evaluation, supports functional and imperative syntax, no dependencies.\n\n### Why should you care?\n\nI wanted a library that has no dependencies and gives me the basic map/reduce/filter for use on objects. Any existing library I found has boatloads of dependencies, provides tons more extra tools, and/or is unmaintained. So here's `ObjectFn`, just for you!\n\nAlso, big props to [@declandewet](https://github.com/declandewet) for the initial implementation of this library!\n\n### Requirements\n\n- [Node.js v.6+](http://nodejs.org)\n\n### Installation\n\nUsing a terminal:\n\n```sh\n$ npm install objectfn -S\n```\n\n### Usage\n\nUsage is straightforward. Just import what you need and use it on an object.\n\n#### Imperative style\n\nTakes data first, callback last.\n\n```js\nconst {map, reduce, filter, forEach} = require('objectfn')\n\nconst obj = { foo: 'bar', wow: 'doge' }\n\nmap(obj, (val) => val.toUpperCase())\n// { foo: 'BAR', wow: 'DOGE' }\n\nreduce(obj, (acc, val, key) => (acc[key.toUpperCase()] = val, acc), {})\n// { FOO: 'bar', WOW: 'doge' }\n\nfilter(obj, (val, key) => key !== 'foo')\n// { wow: 'doge' }\n\nforEach(obj, console.log.bind(console))\n// bar foo 0 { foo: 'bar', wow: 'doge' }\n// doge wow 1 { foo: 'bar', wow: 'doge' }\n```\n\n#### Functional style\n\nTakes callback first, data last. Each method is automatically curried.\n\n```js\nconst {map, reduce, filter, forEach} = require('objectfn')\n\nconst obj = { foo: 'bar', wow: 'doge' }\n\nconst upcaseValues = map((val) => val.toUpperCase())\nupcaseValues(obj)\n// { foo: 'BAR', wow: 'DOGE' }\n\nconst upcaseKeys = reduce((acc, val, key) => (acc[key.toUpperCase()] = key, acc), {})\nupcaseKeys(obj)\n// { FOO: 'bar', WOW: 'doge' }\n\nconst ignoreFoo = filter((val, key) => key !== 'foo')\nignoreFoo(obj)\n// { wow: 'doge' }\n\nconst logValues = forEach(console.log.bind(console))\nlogValues(obj)\n// bar foo 0 { foo: 'bar', wow: 'doge' }\n// doge wow 1 { foo: 'bar', wow: 'doge' }\n```\n\n### Method Signature\n\n- Each callback has a method signature of `(value, key, index, object)` with the exception of `reduce`.\n  - `value` is the current key's value\n  - `key` is the current key's name\n  - `index` is the 0-based index of the current key\n  - `object` is the original object.\n- `reduce` has a method signature of `(accumulator, value, key, index, object)`.\n  - `accumulator` is any initial value onto which you want to iteratively reduce from `object`.\n\n### Differences in `reduce`\n\nIn `objectfn`, the act of passing an accumulator to the `reduce` method is _required_, which is better for readability/accessibility (developer intentions are made more obvious), has no immediate disadvantages and is one of the two reasons `objectfn` is able to support both functional and imperative syntaxes.\n\nThis means that this will work:\n\n```js\nlet obj = { one: 1, two: 2, three: 3, four: 4 }\nreduce(obj, (acc, val) => acc + val, 0) // => 10\n```\n\nBut this will not:\n\n```js\nlet obj = { one: 1, two: 2, three: 3, four: 4 }\nreduce(obj, (prevVal, currVal) => prevVal + currVal) // => wat?\n```\n\n### Binding `this`\n\n`objectfn` offers no mechanism for binding the `this` context of the callback via the last parameter. This is one of two reasons why `objectfn` is able to support both functional and imperative syntaxes. If you want this behavior, it is still possible (and far more readable) to do so using `Function.prototype.bind`:\n\n```js\nmap(obj, fn.bind(/* value to use as `this` goes here */))\n```\n\n### License & Contributing\n\n- Details on the license [can be found here](LICENSE.md)\n- Details on running tests and contributing [can be found here](contributing.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jescalan/objectfn.git"
  },
  "scripts": {
    "coverage": "nyc ava",
    "coveralls": "nyc --reporter=lcov ava && cat ./coverage/lcov.info | coveralls",
    "lint": "standard",
    "test": "ava"
  },
  "version": "2.0.0"
}
