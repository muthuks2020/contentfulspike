{
  "_args": [
    [
      {
        "raw": "parse-latin@^3.1.0",
        "scope": null,
        "escapedName": "parse-latin",
        "name": "parse-latin",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "/home/muthu/try/spiket/node_modules/retext-latin"
    ]
  ],
  "_from": "parse-latin@>=3.1.0 <4.0.0",
  "_id": "parse-latin@3.2.0",
  "_inCache": true,
  "_location": "/parse-latin",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/parse-latin-3.2.0.tgz_1476108976110_0.5152632903773338"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "parse-latin@^3.1.0",
    "scope": null,
    "escapedName": "parse-latin",
    "name": "parse-latin",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/retext-latin"
  ],
  "_resolved": "https://registry.npmjs.org/parse-latin/-/parse-latin-3.2.0.tgz",
  "_shasum": "cfe4b420982b1d20fc16c71dfb33f148de4f1d0b",
  "_shrinkwrap": null,
  "_spec": "parse-latin@^3.1.0",
  "_where": "/home/muthu/try/spiket/node_modules/retext-latin",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "bugs": {
    "url": "https://github.com/wooorm/parse-latin/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    }
  ],
  "dependencies": {
    "nlcst-to-string": "^2.0.0",
    "unist-util-modify-children": "^1.0.0",
    "unist-util-visit-children": "^1.0.0"
  },
  "description": "Latin-script (natural language) parser",
  "devDependencies": {
    "browserify": "^13.0.1",
    "bundle-collapser": "^1.2.1",
    "esmangle": "^1.0.1",
    "is-hidden": "^1.0.1",
    "negate": "^1.0.0",
    "nlcst-test": "^0.2.1",
    "nyc": "^8.3.0",
    "regenerate": "^1.3.1",
    "remark-cli": "^2.0.0",
    "remark-preset-wooorm": "^1.0.0",
    "tape": "^4.0.0",
    "unicode-8.0.0": "^0.7.0",
    "vfile": "^2.0.0",
    "xo": "^0.16.0"
  },
  "directories": {},
  "dist": {
    "shasum": "cfe4b420982b1d20fc16c71dfb33f148de4f1d0b",
    "tarball": "https://registry.npmjs.org/parse-latin/-/parse-latin-3.2.0.tgz"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "b77acf5caaf9662352608fcc2c91398c289873a6",
  "homepage": "https://github.com/wooorm/parse-latin#readme",
  "keywords": [
    "nlcst",
    "latin",
    "script",
    "natural",
    "language",
    "parser"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "parse-latin",
  "nyc": {
    "check-coverage": true,
    "lines": 100,
    "functions": 100,
    "branches": 100
  },
  "optionalDependencies": {},
  "readme": "# parse-latin [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov]\n\nA Latin script language parser for [**retext**][retext] producing\n[**NLCST**][nlcst] nodes.\n\nWhether Old-English (“þā gewearþ þǣm hlāforde and þǣm hȳrigmannum wiþ\nānum penninge”), Icelandic (“Hvað er að frétta”), French (“Où sont\nles toilettes?”), **parse-latin** does a good job at tokenising it.\n\nNote also that **parse-latin** does a decent job at tokenising\nLatin-like scripts, Cyrillic (“Добро пожаловать!”), Georgian (“როგორა\nხარ?”), Armenian (“Շատ հաճելի է”), and such.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install parse-latin\n```\n\n## Usage\n\nDependencies:\n\n```javascript\nvar inspect = require('unist-util-inspect');\nvar Latin = require('parse-latin');\n```\n\nParse:\n\n```javascript\nvar tree = new Latin().parse('A simple sentence.');\n```\n\nWhich, when inspecting, yields:\n\n```txt\nRootNode[1] (1:1-1:19, 0-18)\n└─ ParagraphNode[1] (1:1-1:19, 0-18)\n   └─ SentenceNode[6] (1:1-1:19, 0-18)\n      ├─ WordNode[1] (1:1-1:2, 0-1)\n      │  └─ TextNode: \"A\" (1:1-1:2, 0-1)\n      ├─ WhiteSpaceNode: \" \" (1:2-1:3, 1-2)\n      ├─ WordNode[1] (1:3-1:9, 2-8)\n      │  └─ TextNode: \"simple\" (1:3-1:9, 2-8)\n      ├─ WhiteSpaceNode: \" \" (1:9-1:10, 8-9)\n      ├─ WordNode[1] (1:10-1:18, 9-17)\n      │  └─ TextNode: \"sentence\" (1:10-1:18, 9-17)\n      └─ PunctuationNode: \".\" (1:18-1:19, 17-18)\n```\n\n## API\n\n### `ParseLatin([options])`\n\nExposes the functionality needed to tokenise natural Latin-script\nlanguages into a syntax tree.\n\n###### `options`\n\n*   `position` (`boolean`, default: true).\n\n###### Returns\n\nA new instance.\n\n#### `ParseLatin#tokenize(value)`\n\nTokenise natural Latin-script language into letters and numbers (words),\nwhite space, and everything else (punctuation).  The returned nodes\nare a flat list without paragraphs or sentences.\n\n###### Parameters\n\n*   `value` (`string`) — Value to parse.\n\n###### Returns\n\n[`Array.<NLCSTNode>`][nlcst] — Nodes.\n\n#### `ParseLatin#parse(value)`\n\nTokenise natural Latin-script languages into an [NLCST][nlcst].\nThe returned node is a `RootNode` with in it paragraphs and sentences.\n\n###### Parameters\n\n*   `value` (`string`) — Value to parse.\n\n###### Returns\n\n[`NLCSTNode`][nlcst] — Root node.\n\n## Algorithm\n\n> Note: The easiest way to see **how parse-latin tokenizes and parses**,\n> is by using the [online parser demo](https://wooorm.github.io/parse-latin),\n> which shows the syntax tree corresponding to the typed text.\n\n**parse-latin** splits text into white space, word, and punctuation\ntokens.  **parse-latin** starts out with a pretty easy definition,\none that most other tokenisers use:\n\n*   A “word” is one or more letter or number characters;\n*   A “white space” is one or more white space characters;\n*   A “punctuation” is one or more of anything else.\n\nThen, it manipulates and merges those tokens into an [NLCST][]\nsyntax tree, adding sentences and paragraphs where needed.\n\n*   Some punctuation marks are part of the word they occur in, e.g.,\n    `non-profit`, `she’s`, `G.I.`, `11:00`, `N/A`, `&c`,\n    `nineteenth- and...`;\n*   Some full-stops do not mark a sentence end, e.g., `1.`, `e.g.`,\n    `id.`;\n*   Although full-stops, question marks, and exclamation marks\n    (sometimes) end a sentence, that end might not occur directly\n    after the mark, e.g., `.)`, `.\"`;\n*   And many more exceptions.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/wooorm/parse-latin.svg\n\n[travis]: https://travis-ci.org/wooorm/parse-latin\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/wooorm/parse-latin.svg\n\n[codecov]: https://codecov.io/github/wooorm/parse-latin\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[retext]: https://github.com/wooorm/retext\n\n[nlcst]: https://github.com/wooorm/nlcst\n",
  "readmeFilename": "readme.md",
  "remarkConfig": {
    "output": true,
    "presets": "wooorm"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wooorm/parse-latin.git"
  },
  "scripts": {
    "build": "npm run build-expressions && npm run build-md && npm run build-bundle && npm run build-mangle",
    "build-bundle": "browserify index.js -p bundle-collapser/plugin --bare -s ParseLatin > parse-latin.js",
    "build-expressions": "node script/build-expressions",
    "build-mangle": "esmangle parse-latin.js > parse-latin.min.js",
    "build-md": "remark . --quiet --frail",
    "lint": "xo",
    "test": "npm run build && npm run lint && npm run test-coverage",
    "test-api": "node test/index.js",
    "test-coverage": "nyc --reporter lcov tape test/index.js"
  },
  "version": "3.2.0",
  "xo": {
    "space": true,
    "rules": {
      "guard-for-in": "off",
      "max-depth": "off",
      "max-lines": "off"
    },
    "ignores": [
      "parse-latin.js"
    ]
  }
}
