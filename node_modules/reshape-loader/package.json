{
  "_args": [
    [
      {
        "raw": "reshape-loader@^1.0.0",
        "scope": null,
        "escapedName": "reshape-loader",
        "name": "reshape-loader",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/muthu/try/spiket/node_modules/spike-contentful"
    ]
  ],
  "_from": "reshape-loader@>=1.0.0 <2.0.0",
  "_id": "reshape-loader@1.0.0",
  "_inCache": true,
  "_location": "/reshape-loader",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/reshape-loader-1.0.0.tgz_1491430472889_0.30532429134473205"
  },
  "_npmUser": {
    "name": "jescalan",
    "email": "npm.je@mailhero.io"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reshape-loader@^1.0.0",
    "scope": null,
    "escapedName": "reshape-loader",
    "name": "reshape-loader",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/spike-contentful"
  ],
  "_resolved": "https://registry.npmjs.org/reshape-loader/-/reshape-loader-1.0.0.tgz",
  "_shasum": "c5bf46ad99715b216f87a1b772c4bc2695121cd6",
  "_shrinkwrap": null,
  "_spec": "reshape-loader@^1.0.0",
  "_where": "/home/muthu/try/spiket/node_modules/spike-contentful",
  "author": {
    "name": "Jeff Escalante"
  },
  "ava": {
    "verbose": "true",
    "serial": "true"
  },
  "bugs": {
    "url": "https://github.com/reshape/loader/issues"
  },
  "dependencies": {
    "reshape": "^0.4.1",
    "reshape-include": "^1.0.0"
  },
  "description": "Reshape loader for Webpack",
  "devDependencies": {
    "ava": "^0.19.0",
    "coveralls": "^2.12.0",
    "nyc": "^10.1.2",
    "reshape-custom-elements": "^0.1.0",
    "reshape-expressions": "^0.1.5",
    "snazzy": "^6.0.0",
    "source-loader": "^0.2.0",
    "standard": "^10.0.0",
    "sugarml": "^0.5.0",
    "webpack": "^2.3.2",
    "when": "^3.7.8"
  },
  "directories": {},
  "dist": {
    "shasum": "c5bf46ad99715b216f87a1b772c4bc2695121cd6",
    "tarball": "https://registry.npmjs.org/reshape-loader/-/reshape-loader-1.0.0.tgz"
  },
  "engine": ">=6",
  "gitHead": "f2f953f48ee8bed0a60f5e4248e3da7b9e52fea7",
  "homepage": "https://github.com/reshape/loader",
  "keywords": [
    "html",
    "loader",
    "reshape",
    "webpack"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "jescalan",
      "email": "npm.je@mailhero.io"
    }
  ],
  "name": "reshape-loader",
  "optionalDependencies": {},
  "readme": "# Reshape Webpack Loader\n\n[![npm](https://img.shields.io/npm/v/reshape-loader.svg?style=flat-square)](https://npmjs.com/package/reshape-loader)\n[![tests](https://img.shields.io/travis/reshape/loader.svg?style=flat-square)](https://travis-ci.org/reshape/loader?branch=master)\n[![dependencies](https://img.shields.io/david/reshape/loader.svg?style=flat-square)](https://david-dm.org/reshape/loader)\n[![coverage](https://img.shields.io/coveralls/reshape/loader.svg?style=flat-square)](https://coveralls.io/r/reshape/loader?branch=master)\n\nA reshape loader for webpack\n\n## Installation\n\n```sh\nnpm i reshape-loader --save\n```\n\n## Compatibility\n\nThis loader is only compatible with webpack 2. If you want to use it for webpack 1, you can install version `0.4.2` and checkout the `webpack1` branch for the readme and docs.\n\n## Usage\n\nThere are two distinct ways you can use this loader. By default, it will compile your templates and return a function which you can get by `require`-ing the original template path. It can also produce static html if used with the `locals` option.\n\nOptions are passed through the `options` parameter of the reshape loader rule. It's important to note that the value of `options` must be an object, so it cannot be a function as was used in previous webpack versions.\n\nA basic configuration example:\n\n```js\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [{\n      test: /\\.html$/,\n      loader: 'reshape',\n      options: { plugins: [/* plugins here */] }\n    }]\n  }\n}\n```\n\nThere are a couple differences between the configuration that can be passed through this loader, and to reshape directly. First, the `plugins` option *must be an array*. If you have a single plugin, it cannot be passed as the value of `plugins`, it needs to be contained within an array. Second, any of the options can instead be functions that return the value you want the option to be when called. The loader will execute the functions, passing in webpack's loader context as the first argument. For the `generator` and `parser` options, which are expected to be functions anyway, you must attach a `convert` property to the function if you intend to pass a function that returns your parser/generator rather than the parser/generator itself.\n\nA more advanced example:\n\n```js\n// webpack.config.js\nconst somePlugin = require('./somePlugin')\nconst parser = require('reshape-parser')\nconst sugarml = require('sugarml')\n\nfunction parserFn (loaderContext) {\n  return loaderContext.resourcePath.match(/\\.sgr$/) ? sugarml : parser\n}\nparserFn.convert = true\n\nmodule.exports = {\n  module: {\n    rules: [{\n      test: /\\.html$/,\n      loader: 'reshape',\n      options: {\n        plugins: (loaderContext) => {\n          return [somePlugin({ file: loaderContext.resourcePath })]\n        },\n        parser: parserFn\n      }\n    }]\n  }\n}\n```\n\nNote that the above example is pseudo-code, it will not work if copy/pasted directly. It's just intended to give an idea of how some of the more advanced configuration options might be used.\n\n### Producing Static HTML\n\nReshape produces a function as its output by default, however some use-cases call for returning the static html as the output. If this is necessary, you can use the `locals` argument along with any params you want to pass to the function (such a local variables) to have reshape-loader export a compiled html string. For example:\n\n```html\n<p>Hello {{ planet }}!</p>\n```\n\n```js\n// webpack.config.js\nconst expressions = require('reshape-expressions')\n\nmodule.exports = {\n  module: {\n    rules: [{\n      test: /\\.html$/,\n      use: [\n        { loader: 'html' },\n        {\n          loader: 'reshape',\n          options: {\n            plugins: [expressions()],\n            locals: { planet: 'world' }\n          }\n        }\n      ]\n    }]\n  }\n}\n```\n\n```js\nconst html = require('./index.html')\nconsole.log(html) // <p>Hello world!</p>\n```\n\nIf you do this, you will want at least one other loader in order to integrate the returned source with webpack correctly. For most use cases, the [html-loader](https://github.com/webpack/html-loader) is recommended. If you want to export the html string directly for use in javascript or webpack plugins, we recommend the [source-loader](https://github.com/static-dev/source-loader). Whichever loader you choose, it should be the first loader, followed by reshape, as seen in the example above.\n\n## Custom Plugin Hooks\n\nReshape loader adds a custom hook that webpack plugins can utilize called `beforeLoaderCompile` (sync). This hook exposes the options as they stand immediately before being passed to reshape for compilation, allowing them to be read and/or modified by plugins. For example, if you wanted to make a plugin that adds a `test` key to the locals, it might look like this.\n\n```js\nmodule.exports = class TestPlugin {\n  apply (compiler) {\n    compiler.plugin('beforeLoaderCompile', (options) => {\n      Object.assign(options, { test: 'wow' })\n    })\n  }\n}\n```\n\n## License & Contributing\n\n- Licensed under [MIT](LICENSE.md)\n- See [contributing guidelines](contributing.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reshape/loader.git"
  },
  "scripts": {
    "coverage": "nyc ava && nyc report --reporter=html && open ./coverage/index.html",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "standard | snazzy",
    "pretest": "npm run lint",
    "test": "nyc ava"
  },
  "version": "1.0.0"
}
