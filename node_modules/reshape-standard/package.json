{
  "_args": [
    [
      {
        "raw": "reshape-standard@^1.0.0",
        "scope": null,
        "escapedName": "reshape-standard",
        "name": "reshape-standard",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/muthu/try/spiket"
    ]
  ],
  "_from": "reshape-standard@>=1.0.0 <2.0.0",
  "_id": "reshape-standard@1.1.0",
  "_inCache": true,
  "_location": "/reshape-standard",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/reshape-standard-1.1.0.tgz_1492145384323_0.770485759479925"
  },
  "_npmUser": {
    "name": "jescalan",
    "email": "npm.je@mailhero.io"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reshape-standard@^1.0.0",
    "scope": null,
    "escapedName": "reshape-standard",
    "name": "reshape-standard",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/reshape-standard/-/reshape-standard-1.1.0.tgz",
  "_shasum": "cec92794f53814eaf0099708fb90d4148f1bf511",
  "_shrinkwrap": null,
  "_spec": "reshape-standard@^1.0.0",
  "_where": "/home/muthu/try/spiket",
  "author": {
    "name": "Jeff Escalante"
  },
  "ava": {
    "verbose": "true"
  },
  "bugs": {
    "url": "https://github.com/reshape/standard/issues"
  },
  "dependencies": {
    "markdown-it": "^8.2.2",
    "reshape-beautify": "^0.1.2",
    "reshape-content": "^0.2.0",
    "reshape-expressions": "^0.1.5",
    "reshape-include": "^1.0.0",
    "reshape-layouts": "^1.0.0",
    "reshape-minify": "^0.1.1",
    "reshape-parser": "^0.2.1",
    "reshape-retext": "^0.3.0",
    "retext-smartypants": "^2.0.0",
    "sugarml": "^0.5.0"
  },
  "description": "a standard plugin pack for reshape",
  "devDependencies": {
    "ava": "^0.19.0",
    "coveralls": "2.x",
    "nyc": "^10.0.0",
    "reshape": "^0.4.0",
    "rewire": "^2.5.2",
    "snazzy": "^6.0.0",
    "standard": "^10.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "cec92794f53814eaf0099708fb90d4148f1bf511",
    "tarball": "https://registry.npmjs.org/reshape-standard/-/reshape-standard-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "gitHead": "aa0a374d529a7a139ac4348defe1d3be434621bb",
  "homepage": "https://github.com/reshape/standard",
  "keywords": [
    "html",
    "reshape",
    "reshape-plugin",
    "standard"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "jescalan",
      "email": "npm.je@mailhero.io"
    }
  ],
  "name": "reshape-standard",
  "optionalDependencies": {},
  "readme": "# Reshape Standard Plugin Pack\n\n[![npm](http://img.shields.io/npm/v/reshape-standard.svg?style=flat)](https://badge.fury.io/js/reshape-standard) [![tests](http://img.shields.io/travis/reshape/standard/master.svg?style=flat)](https://travis-ci.org/reshape/standard) [![dependencies](http://img.shields.io/david/reshape/standard.svg?style=flat)](https://david-dm.org/reshape/standard) [![coverage](http://img.shields.io/coveralls/reshape/standard.svg?style=flat)](https://coveralls.io/github/reshape/standard)\n\nA standard, opinionated plugin pack for reshape\n\n> **Note:** This project is in early development, and versioning is a little different. [Read this](http://markup.im/#q4_cRZ1Q) for more details.\n\n### Installation\n\n`npm install reshape-standard -S`\n\n> **Note:** This project is compatible with node v6+ only\n\n### Example\n\nThe standard plugin pack includes plugins that cover all the features needed from a modern template engine. Below is an example of a page utilizing many of the features:\n\n```jade\ndoctype html\nhtml\n  head\n    title Standard Example\n  body\n    h1 Hello world!\n\n    ul#nav\n      li.active: a(href='#') home\n      li: a(href='#') about\n\n    include(src='_welcome_message.sgr')\n\n    p local variable: {{ foo }}\n\n    each(loop='item of items')\n      if(condition='item.name')\n        p {{ item.name }}\n      else\n        p item with no name!\n\n    p(mdi) **Look** at this [markdown](https://daringfireball.net/projects/markdown/)\n```\n\nNote that it is easily possible to configure any of the options. If you don't like the whitespace syntax, you can flip it off with `parser: false` and use the same features with standard `<html>` syntax. If you don't like the `{{ }}` delimiters, you can quickly and easily change them. See the options below for more!\n\n### Usage\n\nThis is nothing more than a light wrapper around a reshape configuration object. Options are filtered into their appropriate plugins internally. All are optional.\n\n```js\nconst reshape = require('reshape')\nconst standard = require('reshape-standard')\n\nreshape(standard(/* options */))\n  .process(someHtml)\n  .then((res) => console.log(res.output()))\n```\n\nBy default, the standard plugin pack includes:\n\n- [sugarml](https://github.com/reshape/sugarml), provided as default parser\n- [reshape-expressions](https://github.com/reshape/expressions), default settings\n- [reshape-layouts](https://github.com/reshape/layouts), default settings\n- [reshape-include](https://github.com/reshape/include), default settings\n- [reshape-content](https://github.com/reshape/content) with `md` and `mdi` functions that render markdown using [markdown-it](https://github.com/markdown-it/markdown-it)\n- [reshape-retext](https://github.com/reshape/retext) with the [smartypants](https://github.com/wooorm/retext-smartypants) plugin\n- [reshape-beautify](https://github.com/reshape/beautify), default settings\n- [reshape-minify](https://github.com/reshape/minify), toggled with the `minify` option which is false by default. When enabled, it will disable `beautify`\n\nBased on the way they are ordered there are a couple limitations to keep in mind:\n\n- You cannot use a layout `block/extend` inside of an `include`\n- Any expression delimiters rendered from a `content` or `retext` transform will be output as plaintext, not as an expression\n- Output from a `content` transform will be processed by `retext` in that order\n\nAny of these plugins can be customized by passing options described below.\n\n### Options\n\n| Name | Description | Default |\n| ---- | ----------- | ------- |\n| **root** | Root path used to resolve layouts and includes | |\n| **filename** | Name of the file being compiled, used for error traces and as the include/layout root if not otherwise provided | |\n| **delimiters** | Delimiters used for html-escaped expressions | `['{{', '}}']` |\n| **unescapeDelimiters** | Delimiters used for unescaped expressions | `['{{{', '}}}']` |\n| **markdown** | Options passed in to [markdown-it](https://github.com/markdown-it/markdown-it) constructor | `{ typographer: true, linkify: true }` |\n| **markdownPlugins** | Plugins to be loaded by [markdown-it](https://github.com/markdown-it/markdown-it) parser. See below for more details. | |\n| **content** | Options passed to the [reshape-content](https://github.com/reshape/content) plugin | `{ md: renderMarkdown, mdi: renderMarkdownInline }` |\n| **parser** | custom html parser if desired. pass `false` to use the default html parser | `sugarml` |\n| **retext** | Plugins to be passed to the [reshape-retext](https://github.com/reshape/retext) plugin | `[smartypants]` ([ref](https://github.com/wooorm/retext-smartypants)) |\n| **locals** | Added directly to the output object, used when compiling a reshape template to html | `{}` |\n| **alias** | Alias option to be passed to the [include plugin](https://github.com/reshape/include#options) | |\n| **parserRules** | Parser rules to be passed to the [include plugin](https://github.com/reshape/include#options) | |\n| **minify** | Minifies the html output by removing excess spaces and line breaks | `false` |\n| **appendPlugins** | Adds a single plugin or array of plugins after all the defaults | |\n| **prependPlugins** | Adds a single plugin or array of plugins before all the defaults | |\n\n### Markdown Rendering Functions\n\nThere are two markdown rendering shortcut functions provided with this plugin pack: `md` and `mdi`. The `md` function will run a full markdown render including wrapping with a paragraph tag, rendering headlines, etc. For example:\n\n```\n.content(md).\n  # The title\n\n  Here's some text, wow.\n\n  A second paragraph!\n```\n\nThis would work as expected, rendering title and paragraph tags:\n\n```\n<div class='content'>\n  <h1>The title</h1>\n  <p>Here's some text, wow.</p>\n  <p>A second paragraph!</p>\n</div>\n```\n\nThe `mdi` shortcut is specifically for rendering _inline_ markdown, not including any type of title tags or paragraph wrapping. So for example:\n\n```\np(mdi) Hello, I am #1 and this is [my link](#).\n```\n\nWould render without additional paragraph wrappings or unexpected title renders:\n\n```\n<p> Hello, I am #1 and this is <a href='#'>my link</a>.\n```\n\n### Markdown Plugins\n\nYou can pass an array of [markdown-it plugins](https://www.npmjs.com/browse/keyword/markdown-it-plugin) via the `markdownPlugins` option with or without their own options.\n\n```js\nconst reshape = require('reshape')\nconst standard = require('reshape-standard')\nconst emoji = require('markdown-it-emoji')\nconst anchor = require('markdown-it-anchor')\nconst toc = require('markdown-it-table-of-contents')\n\nreshape(standard(markdownPlugins: [\n  emoji,\n  anchor,\n  [toc, { containerClass: 'toc' }]\n]))\n  .process(someHtml)\n  .then((res) => console.log(res.output()))\n```\n\n### License & Contributing\n\n- Details on the license [can be found here](LICENSE.md)\n- Details on running tests and contributing [can be found here](contributing.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reshape/standard.git"
  },
  "scripts": {
    "coverage": "nyc ava && nyc report --reporter=html && open ./coverage/index.html",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "standard | snazzy",
    "test": "nyc ava"
  },
  "version": "1.1.0"
}
